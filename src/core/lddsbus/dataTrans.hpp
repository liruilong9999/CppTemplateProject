/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: dataTrans.idl
  Source: dataTrans.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_DATATRANS_HPP
#define DDSCXX_DATATRANS_HPP

#include <cstdint>
#include <vector>
#include <string>

namespace MyModule
{
class MyData
{
private:
 std::string topicName1_;
 std::vector<uint8_t> dataSeg1_;

public:
  MyData() = default;

  explicit MyData(
    const std::string& topicName1,
    const std::vector<uint8_t>& dataSeg1) :
    topicName1_(topicName1),
    dataSeg1_(dataSeg1) { }

  const std::string& topicName1() const { return this->topicName1_; }
  std::string& topicName1() { return this->topicName1_; }
  void topicName1(const std::string& _val_) { this->topicName1_ = _val_; }
  void topicName1(std::string&& _val_) { this->topicName1_ = _val_; }
  const std::vector<uint8_t>& dataSeg1() const { return this->dataSeg1_; }
  std::vector<uint8_t>& dataSeg1() { return this->dataSeg1_; }
  void dataSeg1(const std::vector<uint8_t>& _val_) { this->dataSeg1_ = _val_; }
  void dataSeg1(std::vector<uint8_t>&& _val_) { this->dataSeg1_ = _val_; }

  bool operator==(const MyData& _other) const
  {
    (void) _other;
    return topicName1_ == _other.topicName1_ &&
      dataSeg1_ == _other.dataSeg1_;
  }

  bool operator!=(const MyData& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::MyModule::MyData>::getTypeName()
{
  return "MyModule::MyData";
}

template <> constexpr bool TopicTraits<::MyModule::MyData>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::MyModule::MyData>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::MyModule::MyData>::type_map_blob_sz() { return 274; }
template<> constexpr unsigned int TopicTraits<::MyModule::MyData>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::MyModule::MyData>::type_map_blob() {
  static const uint8_t blob[] = {
 0x55,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xa0,  0x34,  0xf1,  0xf0,  0xa1,  0x2e,  0x8a, 
 0xbf,  0xea,  0x87,  0x6f,  0x6d,  0x27,  0x49,  0x00,  0x3d,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2d,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x64,  0x9f,  0xa4,  0xc9,  0x51, 
 0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x81,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0xa0,  0x00,  0x02,  0xec,  0x8d,  0x00,  0xae,  0x00,  0x00,  0x00,  0x8b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x07,  0xa7,  0xe3,  0x37,  0x3b,  0x95,  0xa7,  0xbb,  0xcf,  0x2c, 
 0x5f,  0x63,  0xd6,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x4d,  0x79,  0x4d,  0x6f,  0x64,  0x75,  0x6c,  0x65, 
 0x3a,  0x3a,  0x4d,  0x79,  0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x64, 
 0x0b,  0x00,  0x00,  0x00,  0x74,  0x6f,  0x70,  0x69,  0x63,  0x4e,  0x61,  0x6d,  0x65,  0x31,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x81,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0xa0,  0x00,  0x02,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x64,  0x61,  0x74,  0x61,  0x53,  0x65,  0x67,  0x31,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x07,  0xa7,  0xe3,  0x37,  0x3b,  0x95,  0xa7,  0xbb,  0xcf,  0x2c, 
 0x5f,  0x63,  0xd6,  0xf1,  0xa0,  0x34,  0xf1,  0xf0,  0xa1,  0x2e,  0x8a,  0xbf,  0xea,  0x87,  0x6f,  0x6d, 
 0x27,  0x49, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::MyModule::MyData>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xa0,  0x34,  0xf1,  0xf0,  0xa1,  0x2e,  0x8a,  0xbf,  0xea,  0x87,  0x6f, 
 0x6d,  0x27,  0x49,  0x00,  0x41,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xa0,  0x07,  0xa7,  0xe3,  0x37,  0x3b,  0x95,  0xa7,  0xbb,  0xcf,  0x2c, 
 0x5f,  0x63,  0xd6,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::MyModule::MyData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::MyModule::MyData>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::MyModule::MyData)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::MyModule::MyData>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::MyModule::MyData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.topicName1(), 100))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dataSeg1().size());
      if (se_1 > 10485760 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.dataSeg1()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::MyModule::MyData& instance, bool as_key) {
  auto &props = get_type_props<::MyModule::MyData>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::MyModule::MyData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.topicName1(), 100))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dataSeg1().size());
      if (se_1 > 10485760 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.dataSeg1().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.dataSeg1()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::MyModule::MyData& instance, bool as_key) {
  auto &props = get_type_props<::MyModule::MyData>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::MyModule::MyData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.topicName1(), 100))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dataSeg1().size());
      if (se_1 > 10485760 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::MyModule::MyData& instance, bool as_key) {
  auto &props = get_type_props<::MyModule::MyData>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::MyModule::MyData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.topicName1(), 100))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 10485760;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::MyModule::MyData& instance, bool as_key) {
  auto &props = get_type_props<::MyModule::MyData>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_DATATRANS_HPP
